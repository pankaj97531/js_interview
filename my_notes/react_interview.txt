	{
		Interview Question list : https://www.fullstack.cafe/blog/react-js-interview-questions
								https://www.toptal.com/react/interview-questions
								https://github.com/sudheerj/reactjs-interview-questions
		keyword : react coding  questions
	}
Q : How React works ?

A : https://www.youtube.com/watch?v=mLMfx8BEt8g
	https://www.youtube.com/watch?v=gApwC9Ek9yo
	React is javascript library used to create user interface.
	We develop UI in React with component.
	
	In HTML and JavaScript we also create UI.But there is difference in rendering.
	If we compare it with javascript, rendering operation in javascript is expensive.
	Browser has go through a sequence of step each time it has to render the new DOM structure.
	
	In react we use virtual DOM.
	We create template in react using JSX.React compiles this template but instead rendering into DOM directly it create a copy of this DOM structure.
	This new DOM structure copy of actual DOM is called a virtual DOM.
	As we have created virtual dom for first time renders the same as it is into the browser as real DOM. And browser going to dispaly the output.
	Now we have new data , react will create a new copy of vitual DOM combine with new data and it compare the new copy of virtual DOM with previous copy of virtual DOM.
	All it is happening inside the memory nothing is getting rendered in react DOM. As we have difference in both copies.
	After finding difference react update that part of DOM only.This new type of rendering is performance benefit.

Q : What is Redux ?

	A Predictable State Container for JS Apps. 
	It has follwoing feature :
	Redux helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.
	Centralizing your application's state and logic enables powerful capabilities.
	The Redux DevTools make it easy to trace when, where, why, and how your application's state changed. 
	Redux works with any UI layer, and has a large ecosystem of addons to fit your needs.
	
	Three principle of redux : 

	1. There is only one source of truth.

	2. State is read only.

	3. Changes are made with pure function.

Q : What is memo in react

	React.memo is a higher order component. It’s similar to React.PureComponent but for function components instead of classes.

	If your function component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result.
	
	const MyComponent = React.memo(function MyComponent(props) {
	  /* render using props */
	});
	
	function MyComponent(props) {
	  /* render using props */
	}
	function areEqual(prevProps, nextProps) {
	  /*
	  return true if passing nextProps to render would return
	  the same result as passing prevProps to render,
	  otherwise return false
	  */
	}
	export default React.memo(MyComponent, areEqual);
	
	areEqual(prevProps, nextProps) function must return true if prevProps and nextProps are equal.

Q : What is suspension in react

	Suspense lets your components “wait” for something before they can render.
	Suspense is not a data fetching library. It’s a mechanism for data fetching libraries to communicate to React that the data a component is reading is not ready yet. React can then wait for it to be ready and update the UI. At Facebook, we use Relay and its new Suspense integration. 

Q : What is limitation of react

	One way data binding , Two way data binding is not supported. View-orientedness is one of the cons of ReactJS. React Js is not SEO-friendly. React is library not framework. For many work we have to dependent on third party library.

	It is a UI library only. As such when building something with React you will have to include other libraries to handle other parts of an application, such as application state.

	When comparing it to a monolithic framework such as AngularJS, you will find that there is no predefined way to structure your app (such as services, controllers & views in Angular). This means that it is the responsibility of the developer to find his/her own ways to effectively manage several parts of the application without a predefined structure. This can lead to significant overhead and long development times when the devised structure is bad or ineffective.

	To avoid these pitfalls, it is not enough to just learn React and start coding. If you want to avoid trouble in the long run you have to research popular & effective ways to structure your app from third parties, such as blogs or example apps from github. Those however are rarely detailed enough to represent a complex application and as such can’t give you a good guideline on what to do and not to do. You will have to make your own experiences here and learn from them.

	All the stuff going on in the background. React is mainly written using JSX & ES6, transpiled using Babel and build & packaged using Webpack & npm. Those tools are requirements to be effective when using React, however their inner workings & processes are not easy to learn and require significant time to understand. On the other hand if you skip learning those things, your build might fail with error messages that have no meaning to you and you will be stuck with code that doesn’t work and you have no power to correct by yourself.

	React is still very young. The ecosystem behind it (open-source libraries, components) is still small compared to older frameworks such as Angular. You will not always find what you are looking for in open-source contributions.

	Touching on the last point, while React’s APIs are mostly stable, there are still some things that can change in future versions (such as the childContext API). There is no guarantee that the code you write today will work with future versions of React.

	Last but not least, it features a radically different approach to UI design by introducing reusable components. The process of learing how to think in React can be difficult for you if you have extensive experience using other methods, such as MVC. You basically have to avoid falling back into old thought patterns because they most likely don’t work effectively with React.

Q : What is server side rendering

Q : What is three view in virtual dom

	virtual dom is Virtual represntation of UI is kept in memory and synced with the real DOM by a library such as React DOM.This  process is called reconcilation.
	
Q : What is reconcilation.
	
	When you use React, at a single point in time you can think of the render() function as creating a tree of React elements. On the next state or props update, that render() function will return a different tree of React elements. React then needs to figure out how to efficiently update the UI to match the most recent tree.
	
	If we used this in React, displaying 1000 elements would require in the order of one billion comparisons(state of art alogorith O(n^3)). This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:
	Two elements of different types will produce different trees.
	The developer can hint at which child elements may be stable across different renders with a key prop.
	The Diffing Algorithm
	When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements.
	
	Elements Of Different Types :
	
	Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. Going from <a> to <img>, or from <Article> to <Comment>, or from <Button> to <div> - any of those will lead to a full rebuild.
	
	When tearing down a tree, old DOM nodes are destroyed. Component instances receive componentWillUnmount(). When building up a new tree, new DOM nodes are inserted into the DOM. Component instances receive componentWillMount() and then componentDidMount(). Any state associated with the old tree is lost.
	
	Any components below the root will also get unmounted and have their state destroyed. For example, when diffing:
	
	<div>
	  <Counter />
	</div>

	<span>
	  <Counter />
	</span>
	
	This will destroy the old Counter and remount a new one.	
	
Q : What is React DOM.

	React DOM package provide DOM specific Method that can be used at top level of your app.
	React DOM specific method  : 
	render,
	hydrate,
	unmountcomponentAtNode,
	findDOMNode,
	CreatePortal	

Q : What is difference between react 15 and 16

	Error Boundary : 

	Fragments : 

	Portals : Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. render() {
	return ReactDOM.createPortal(
    this.props.children,
    domNode,
	);
	}

	Reduced File Size :

	Move to prop-types package from React.PropTypes.
	
	Better server-side rendering.
	
	React 16 includes a completely rewritten server renderer. It’s really fast. It supports streaming, so you can start sending bytes to the client faster.
	
	React.createClass is now available as create-react-class,
	
	React.DOM as react-dom-factories
	
Q : What is portals.
	
	Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.
	example : 
	https://codepen.io/gaearon/pen/jGBWpE
	https://codesandbox.io/s/00254q4n6p
	
	
Q : What is Error Boundary

	Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.
	
	A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Use static getDerivedStateFromError() to render a fallback UI after an error has been thrown. Use componentDidCatch() to log error information.	

Q : What is webpack

	Webpack is a module bundler.
	Webpack can take care of bundling alongside a separate task runner.
	
	The smallest project you can bundle with webpack consists of input and output. 
	
	The bundling process begins from user-defined entries. Entries themselves are modules and can point to other modules through imports.
	
	When you bundle a project using webpack, it traverses the imports, constructing a dependency graph of the project and then generates output based on the configuration. Additionally, it's possible to define split points to create separate bundles within the project code itself.

Q : What is JSX

	it is a syntax extension to JavaScript. 
	JSX may remind you of a template language, but it comes with the full power of JavaScript.

Q : Call apply and bind
	

Q : What is delete method in javascript

	The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.
	const Employee = {
	  firstname: 'John',
	  lastname: 'Doe'
	};

	console.log(Employee.firstname);
	// expected output: "John"

	delete Employee.firstname;

	console.log(Employee.firstname);
	// expected output: undefined

Q : Object method in javascript
	
	Object.create(),Object.assign(), Object.freeze(), Object.keys(), Object.values(), Object.entries(),
	Object.getOwnProperty(), Object.getOwnProperties(), Object.getOwnPropertyDescriptor(), Object.getOwnPropertyDescriptors() , Object.getOwnPropertyNames()

Q : Event loop

	Javascript is single threaded asynchronous programming language.
	Single threaded means : main thread runs code one line time manner.
	Heap Region : Random allocation of memeory and used for memeory allocation
	Stack region : For allocating the memeory in the form of stack and is used to manage function.
	Stack is a linear data structure in which addition or removal of element follows a particular order i.e. LIFO(Last in First Out) AND FILO(First in Last Out).
	{
		https://www.geeksforgeeks.org/implementation-stack-javascript/
		https://medium.com/better-programming/implementing-a-stack-in-javascript-73d1aa0483c1
	}
	Stacks are data structures that follow the Last-In-First-Out (LIFO) principle, meaning the last item inserted into a stack is the first one to be deleted.
	In other words, a stack is a list of elements that are accessible only from one end of the list, which is called the Top of Stack (ToS).
	Stack is continuously keep tracking of function at run time.
	Web API : DOM , AJAX request, timer , task difficult to perform at main thread.
	Javascript runtime is single threaded.	Browser on the other hand browser has capability to respond multiple thread  perform task assinged to it.
	Event Loop : Event Loop is that enitity whicn pull stuff out of event queue and places it on to the function execution stack.whenevever function stack is empty.
	Event Queue : Event queue is special queue keeps track of all the event appending to gets exccuted in javascript.That piece of code that is wating to run but has not get schdule to run.

	for example :
	setTimeout -------> loads in function stack ----------> calls webapi provided to it by browser-------->fire a timer-------->settimeout executed---------->code execution flow contineue-------->after certain time web api call callback function and places it into event queue------------>callback function has not been run waiting for its turn on js run time------->all stack is empty ----------->event loop takes first function getting to execution and places it on to the stack 	
	

Q : why we are using react over any other framework

Q : how to set default prop in react

Q : performance in react


Q : semantic html in react
	
	Header,Main,Section,Article,Nav,Sidebar,Footer these are semantic tag inplemnted in HTML5.

Q : Difference between react dom and dom 

A : {
	https://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/
	https://stackoverflow.com/questions/34114350/react-vs-reactdom
	}

Q : controlled input and uncontrolled input in react

	If we controlled our input with state and onchange method then that is controlled input. If we access input with ref then that input is called uncontrolled input.  

Q : Memory management in javascript.

Q : what is stack queue and heap in javascript

Q : https://www.toptal.com/nodejs/top-10-common-nodejs-developer-mistakes

Q : What is controlled component and uncontrolled component.
	
	State and onchange component is controlled component. Ref based component is uncontrolled component.

	controlled Component

	No direct access to DOM.
	No access to input.
	Only concern to altering state.
	Rely on React To manupulate the dom.
	Use state and virtual dom to access the data

	Uncontrolled Component

	In a controlled component, form data is handled by a React component. 
	The alternative is uncontrolled components, where form data is handled by the DOM itself.
	you can use a ref to get form values from the DOM.

	example of Uncontrolled :
	class NameForm extends React.Component {
	  constructor(props) {
		super(props);
		this.handleSubmit = this.handleSubmit.bind(this);
		this.input = React.createRef();
	  }

	  handleSubmit(event) {
		alert('A name was submitted: ' + this.input.current.value);
		event.preventDefault();
	  }

	  render() {
		return (
		  <form onSubmit={this.handleSubmit}>
			<label>
			  Name:
			  <input type="text" ref={this.input} />
			</label>
			<input type="submit" value="Submit" />
		  </form>
		);
	  }
	}	

Q : How to resolve CORS(Access-Control-Allow-Origin) in react and nodejs.

	virtual dom sits on top of the browser html dom.Virtual dom listen for changes.If there is change then the HTML DOM underneath is updated with the new UI.By comparing the changes with virtual dom the real dom is able to update the UI.
	The react virtual dom is mounting the real browser dom.
	
	with proxy in package.json

	componentdidmount : this tell us virtual dom of successfully mounted the real dom.


Q : Difference between React Router 3 and 4.

	React Router 3 used config based roting(route.js)

	React Router 4 is pure component.

	React router dom and react router re export all of react router.

	React router 5 {

		Fully backward compatible with 4.x
		
		Better support of React 16
		
		New Context API
		
		Allow array of route for single component

	}

	React Router 

	Browserrouter : Handle dynamic request
	
	Hashrouter : static website
	
	Redux : 

		Describe Application state as plain object and array.
		
		Describe changes in the system as plain object.
		
		Describe the logic for handling changes as pure function.
	
	Pure function : 

		Given the same input will always return same output.

		Produces no side effect.

	Store : 

		Hold application state 
			
		Allow access to state via getState

		Allows state to be updated via actions

		One store per application	
		
	Redux form :

		React does not provide a form solution.
			
		Redux form are a popular form solution for react.
		
		Redux provide many prop (dirty,pristine,submitting,pristine)
		
		Redux provide form validation
		
		Redux form reuseablility.

	Redux form validator : 

		combineValidators,
		
		composeValidators,
		
		isRequired,
		
		hasLengthBetween,
		
		hasLengthLessThan,
		
		isAlphabetic,

		invalid,
		
		submitting,
		
		pristine

Q : Some higher order component exmaple in react and higher order function in JavaScript